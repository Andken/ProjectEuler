# Problem 61
# 
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
# 
# Triangle   	  P3,n=n(n+1)/2		  	     1, 3, 6, 10, 15, ...
# Square		   				     P4,n=n2   	  1, 4, 9, 16, 25, ...
# Pentagonal					      		  P5,n=n(3n1)/2		1, 5, 12, 22, 35, ...
# Hexagonal							   			P6,n=n(2n1)    	  1, 6, 15, 28, 45, ...
# Heptagonal										 		  P7,n=n(5n3)/2	    1, 7, 18, 34, 55, ...
# Octagonal												   		    P8,n=n(3n2)	      1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
# 
# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
# 
#

triangle = []
square = []
pentagonal = []
hexagonal = []
heptagonal = []
octagonal = []

current_triangle = 1
n = 1
while(current_triangle < 10000 ):
    if current_triangle >= 1000:
        triangle.append(current_triangle)
    current_triangle = n*(n+1)/2
    n=n+1

n = 1
current_square = 1
while(current_square < 10000 ):
    if current_square >= 1000:
        square.append(current_square)
    current_square = n*n
    n=n+1

n = 1
current_pentagonal = 1
while(current_pentagonal < 10000 ):
    if current_pentagonal >= 1000:
        pentagonal.append(current_pentagonal)
    current_pentagonal = n*(3*n-1)/2
    n=n+1

n = 1
current_hexagonal = 1
while(current_hexagonal < 10000 ):
    if current_hexagonal >= 1000:
        hexagonal.append(current_hexagonal)
    current_hexagonal = n*(2*n-1)
    n=n+1

n = 1
current_heptagonal = 1
while(current_heptagonal < 10000 ):
    if current_heptagonal >= 1000:
        heptagonal.append(current_heptagonal)
    current_heptagonal = n*(5*n-3)/2
    n=n+1

n = 1
current_octagonal = 1
while(current_octagonal < 10000 ):
    if current_octagonal >= 1000:
        octagonal.append(current_octagonal)
    current_octagonal = n*(3*n-2)
    n=n+1


print triangle
print square
print pentagonal
print hexagonal
print heptagonal
print octagonal
